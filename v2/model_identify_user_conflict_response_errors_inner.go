/*
OneSignal

A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com

API version: 1.2.1
Contact: devrel@onesignal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onesignal

import (
	"encoding/json"
)

// IdentifyUserConflictResponseErrorsInner struct for IdentifyUserConflictResponseErrorsInner
type IdentifyUserConflictResponseErrorsInner struct {
	Code *string `json:"code,omitempty"`
	Title *string `json:"title,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IdentifyUserConflictResponseErrorsInner IdentifyUserConflictResponseErrorsInner

// NewIdentifyUserConflictResponseErrorsInner instantiates a new IdentifyUserConflictResponseErrorsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentifyUserConflictResponseErrorsInner() *IdentifyUserConflictResponseErrorsInner {
	this := IdentifyUserConflictResponseErrorsInner{}
	return &this
}

// NewIdentifyUserConflictResponseErrorsInnerWithDefaults instantiates a new IdentifyUserConflictResponseErrorsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentifyUserConflictResponseErrorsInnerWithDefaults() *IdentifyUserConflictResponseErrorsInner {
	this := IdentifyUserConflictResponseErrorsInner{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *IdentifyUserConflictResponseErrorsInner) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentifyUserConflictResponseErrorsInner) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *IdentifyUserConflictResponseErrorsInner) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *IdentifyUserConflictResponseErrorsInner) SetCode(v string) {
	o.Code = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *IdentifyUserConflictResponseErrorsInner) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentifyUserConflictResponseErrorsInner) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *IdentifyUserConflictResponseErrorsInner) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *IdentifyUserConflictResponseErrorsInner) SetTitle(v string) {
	o.Title = &v
}

func (o IdentifyUserConflictResponseErrorsInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *IdentifyUserConflictResponseErrorsInner) UnmarshalJSON(bytes []byte) (err error) {
	varIdentifyUserConflictResponseErrorsInner := _IdentifyUserConflictResponseErrorsInner{}

	if err = json.Unmarshal(bytes, &varIdentifyUserConflictResponseErrorsInner); err == nil {
		*o = IdentifyUserConflictResponseErrorsInner(varIdentifyUserConflictResponseErrorsInner)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "code")
		delete(additionalProperties, "title")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIdentifyUserConflictResponseErrorsInner struct {
	value *IdentifyUserConflictResponseErrorsInner
	isSet bool
}

func (v NullableIdentifyUserConflictResponseErrorsInner) Get() *IdentifyUserConflictResponseErrorsInner {
	return v.value
}

func (v *NullableIdentifyUserConflictResponseErrorsInner) Set(val *IdentifyUserConflictResponseErrorsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentifyUserConflictResponseErrorsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentifyUserConflictResponseErrorsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentifyUserConflictResponseErrorsInner(val *IdentifyUserConflictResponseErrorsInner) *NullableIdentifyUserConflictResponseErrorsInner {
	return &NullableIdentifyUserConflictResponseErrorsInner{value: val, isSet: true}
}

func (v NullableIdentifyUserConflictResponseErrorsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentifyUserConflictResponseErrorsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


