/*
OneSignal

A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com

API version: 1.2.1
Contact: devrel@onesignal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onesignal

import (
	"encoding/json"
)

// IdentifyUserConflictResponse struct for IdentifyUserConflictResponse
type IdentifyUserConflictResponse struct {
	Errors []IdentifyUserConflictResponseErrorsInner `json:"errors,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IdentifyUserConflictResponse IdentifyUserConflictResponse

// NewIdentifyUserConflictResponse instantiates a new IdentifyUserConflictResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentifyUserConflictResponse() *IdentifyUserConflictResponse {
	this := IdentifyUserConflictResponse{}
	return &this
}

// NewIdentifyUserConflictResponseWithDefaults instantiates a new IdentifyUserConflictResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentifyUserConflictResponseWithDefaults() *IdentifyUserConflictResponse {
	this := IdentifyUserConflictResponse{}
	return &this
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *IdentifyUserConflictResponse) GetErrors() []IdentifyUserConflictResponseErrorsInner {
	if o == nil || o.Errors == nil {
		var ret []IdentifyUserConflictResponseErrorsInner
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentifyUserConflictResponse) GetErrorsOk() ([]IdentifyUserConflictResponseErrorsInner, bool) {
	if o == nil || o.Errors == nil {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *IdentifyUserConflictResponse) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []IdentifyUserConflictResponseErrorsInner and assigns it to the Errors field.
func (o *IdentifyUserConflictResponse) SetErrors(v []IdentifyUserConflictResponseErrorsInner) {
	o.Errors = v
}

func (o IdentifyUserConflictResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *IdentifyUserConflictResponse) UnmarshalJSON(bytes []byte) (err error) {
	varIdentifyUserConflictResponse := _IdentifyUserConflictResponse{}

	if err = json.Unmarshal(bytes, &varIdentifyUserConflictResponse); err == nil {
		*o = IdentifyUserConflictResponse(varIdentifyUserConflictResponse)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "errors")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIdentifyUserConflictResponse struct {
	value *IdentifyUserConflictResponse
	isSet bool
}

func (v NullableIdentifyUserConflictResponse) Get() *IdentifyUserConflictResponse {
	return v.value
}

func (v *NullableIdentifyUserConflictResponse) Set(val *IdentifyUserConflictResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentifyUserConflictResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentifyUserConflictResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentifyUserConflictResponse(val *IdentifyUserConflictResponse) *NullableIdentifyUserConflictResponse {
	return &NullableIdentifyUserConflictResponse{value: val, isSet: true}
}

func (v NullableIdentifyUserConflictResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentifyUserConflictResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


